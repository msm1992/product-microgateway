import ballerina/log;
import ballerina/http;
import ballerina/config;
import ballerina/time;

{{#if containerConfig.hasKubernetes}}import ballerinax/kubernetes;{{/if}}

import wso2/gateway;

{{#equals endpointConfig.endpointType "http"}}
{{#endpointConfig.prodEndpoints}}{{>httpEndpoint}}{{/endpointConfig.prodEndpoints}}
{{#endpointConfig.sandEndpoints}}{{>httpEndpoint}}{{/endpointConfig.sandEndpoints}}
{{/equals}}
{{#equals endpointConfig.endpointType "load_balance"}}
{{#endpointConfig.prodEndpoints}}{{>lbEndpoint}}{{/endpointConfig.prodEndpoints}}
{{#endpointConfig.sandEndpoints}}{{>lbEndpoint}}{{/endpointConfig.sandEndpoints}}
{{/equals}}
{{#equals endpointConfig.endpointType "failover"}}
{{#endpointConfig.prodFailoverEndpoints}}{{>failoverEndpoint}}{{/endpointConfig.prodFailoverEndpoints}}
{{#endpointConfig.sandFailoverEndpoints}}{{>failoverEndpoint}}{{/endpointConfig.sandFailoverEndpoints}}
{{/equals}}

{{>kubernetes}}


@http:ServiceConfig {
    basePath: "{{api.context}}{{#unless api.isDefaultVersion}}/{{api.version}}{{/unless}}",{{!-- {{only one base path is allowed for all  endpoints}} --}}
    authConfig:{
        authProviders:["oauth2"]
    }{{#api.corsConfiguration.corsConfigurationEnabled}},
        cors: {
                allowOrigins: [{{#api.corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.corsConfiguration.accessControlAllowOrigins}}],
                allowCredentials: {{api.corsConfiguration.accessControlAllowCredentials}},
                allowHeaders: [{{#api.corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.corsConfiguration.accessControlAllowHeaders}}]
            }
    {{/api.corsConfiguration.corsConfigurationEnabled}}
}

@gateway:API {
    publisher:"{{api.provider}}",
    name:"{{api.name}}",
    apiVersion: "{{api.version}}" {{#if api.authorizationHeader}},
    authorizationHeader : "{{api.authorizationHeader}}" {{/if}}
}
service<http:Service> {{cut qualifiedServiceName " "}} bind {{#api.transport}}{{#equals . "http"}}apiListener{{#unless @last}},{{/unless}}{{/equals}}{{#equals . "https"}}apiSecureListener{{/equals}}{{/api.transport}} {
{{#paths}}{{#value}}{{#operations}}{{#value}}

    @http:ResourceConfig {
        methods:["{{upper key}}"],
        path:"{{../../key}}",
        authConfig:{
            authProviders:["oauth2"] {{#unless isSecured}},
            authentication:{enabled:false} {{/unless}} {{#if scope}},
            scopes: ["{{scope}}"] {{/if}}

        }
    }
    @gateway:RateLimit{policy : "{{resourceTier}}"}
    {{operationId}} (endpoint outboundEp, http:Request req) {
    {{#if api.isDefaultVersion}}
    string urlPostfix = untaint req.rawPath.replace("{{api.context}}","");
    {{else}}
    string urlPostfix = untaint req.rawPath.replace("{{api.context}}/{{api.version}}","");
    {{/if}}
        http:Response|error clientResponse;
        runtime:getInvocationContext().attributes["timeStampRequestOut"] = time:currentTime().time;
        {{#endpointConfig.prodEndpoints}}
            {{#endpointConfig.sandEndpoints}}
                if("PRODUCTION" == runtime:getInvocationContext().attributes["KEY_TYPE"]) {
                    clientResponse = {{qualifiedServiceName}}_prod->forward(urlPostfix, req);
                    runtime:getInvocationContext().attributes["destination"] = "{{endpointConfig.prodEndpoints.endpoints.0.endpointUrl}}";
                } else {
                    clientResponse = {{qualifiedServiceName}}_sand->forward(urlPostfix, req);
                    runtime:getInvocationContext().attributes["destination"] = "{{endpointConfig.sandEndpoints.endpoints.0.endpointUrl}}";
                }
            {{/endpointConfig.sandEndpoints}}
            {{^endpointConfig.sandEndpoints}}
                if("PRODUCTION" == runtime:getInvocationContext().attributes["KEY_TYPE"]) {
                    clientResponse = {{qualifiedServiceName}}_prod->forward(urlPostfix, req);
                    runtime:getInvocationContext().attributes["destination"] = "{{endpointConfig.prodEndpoints.endpoints.0.endpointUrl}}";
                } else {
                    http:Response res = new;
                    res.statusCode = 403;
                    json payload = {
                        ERROR_CODE: "900901",
                        ERROR_MESSAGE: "Sandbox key offered to the API with no sandbox endpoint"
                    };
                    runtime:getInvocationContext().attributes["error_code"] = "900901";
                    res.setPayload(payload);
                    clientResponse = res;
                }
            {{/endpointConfig.sandEndpoints}}
        {{/endpointConfig.prodEndpoints}}
        {{^endpointConfig.prodEndpoints}}
            if("SANDBOX" == runtime:getInvocationContext().attributes["KEY_TYPE"]) {
                clientResponse = {{qualifiedServiceName}}_sand->forward(urlPostfix, req);
                runtime:getInvocationContext().attributes["destination"] = "{{endpointConfig.sandEndpoints.endpoints.0.endpointUrl}}";
            } else {
                http:Response res = new;
                res.statusCode = 403;
                json payload = {
                    ERROR_CODE: "900901",
                    ERROR_MESSAGE: "Production key offered to the API with no production endpoint"
                };
                runtime:getInvocationContext().attributes["error_code"] = "900901";
                res.setPayload(payload);
                clientResponse = res;
            }
        {{/endpointConfig.prodEndpoints}}
        runtime:getInvocationContext().attributes["timeStampResponseIn"] = time:currentTime().time;

        match clientResponse {

            http:Response res => {
                outboundEp->respond(res) but { error e =>
                log:printError("Error when sending response", err = e) };
            }

            error err => {
                http:Response res = new;
                res.statusCode = 500;
                string errorMessage = err.message;
                int errorCode = 101503;
                string errorDescription = "Error connecting to the back end";

                if(errorMessage.contains("connection timed out") || errorMessage.contains("Idle timeout triggered")) {
                    errorCode = 101504;
                    errorDescription = "Connection timed out";
                }
                runtime:getInvocationContext().attributes["error_response"] = err;
                runtime:getInvocationContext().attributes["error_response_code"] = errorCode;
                json payload = {fault : {
                    code : errorCode,
                    message : "Runtime Error",
                    description : errorDescription
                }};
                res.setPayload(payload);
                log:printError("Error in client response", err = err);
                outboundEp->respond(res) but { error e =>
                log:printError("Error when sending response", err = e) };
            }
        }
    }
{{/value}}{{/operations}}{{/value}}{{/paths}}
}